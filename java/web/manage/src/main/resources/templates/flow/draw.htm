<!doctype html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title th:text="'绘制流程图 - ' + ${page.title}"></title>
    <link rel="stylesheet" type="text/css" th:href="@{{url}/plugins/jquery-easyui/themes/bootstrap/easyui.css(url=${staticUrl})}">
    <link rel="stylesheet" type="text/css" th:href="@{{url}/plugins/jquery-easyui/themes/icon.css(url=${staticUrl})}">
    <link rel="stylesheet" type="text/css" th:href="@{{url}/plugins/font-awesome/css/font-awesome.css(url=${staticUrl})}">
    <style type="text/css" th:inline="text">
        .layout-north{height:28px;}
        .layout-south{height:22px;padding: 2px;}
        .layout-east{width:280px;}
        .layout-west{width:180px;}
        .layout-center{background:#eee; position: relative;}
        #flow-chart-canvas{width:700px; height:500px; position:relative; margin:auto; background:url("[[${staticUrl}]]/img/grid.gif");}
        .flow-chart-item{position: absolute;}
    </style>
</head>
<body class="easyui-layout">
<div class="layout-north" data-options="region:'north'">
    <button class="easyui-linkbutton flow-chart-act-save" data-options="iconCls:'icon-save',plain:true">保存</button>
    <button class="easyui-linkbutton flow-chart-act-node-refresh" data-options="iconCls:'icon-reload',plain:true">刷新节点</button>
    <a class="easyui-linkbutton" th:href="@{{url}/flow/returns(url=${manageUrl})}" target="_blank" data-options="iconCls:'icon-filter',plain:true">字段编辑器</a>
</div>
<div class="layout-south" data-options="region:'south'">状态信息：<span id="tips-status"></span></div>
<div class="layout-east" data-options="region:'east',title:'属性',split:true">
    <table id="flow-property-table" style="width:100%;"></table>
</div>
<div class="layout-west" data-options="region:'west',title:'节点',split:true">
    <ul id="flow-nodes-tree"></ul>
</div>
<div class="layout-center" data-options="region:'center',title:'流程图',content:''">
    <div id="flow-chart-canvas"></div>
</div>
<script th:src="@{{url}/js/jquery-1.12.4.js(url=${staticUrl})}"></script>
<script th:src="@{{url}/plugins/jquery-easyui/jquery.easyui.min.js(url=${staticUrl})}"></script>
<script th:src="@{{url}/plugins/jsplumb/jsplumb.js(url=${staticUrl})}"></script>
<script th:src="@{{url}/js/manage.js(url=${staticUrl})}"></script>
<script type="application/javascript" th:inline="javascript">
var manageUrl = [[${manageUrl}]];
var saveUrl = [[${saveUrl}]];
var info = {
    id: [[${info?.id?:""}]],
    content : [[${info?.content?:""}]]
};
</script>
<script type="application/javascript">
jsPlumb.bind("ready", function() {
    /**
     * 生成右键菜单
     */
    function ContextMenu(e, data) {
        this.container = $('body');
        this.container.children('.context-menu, .menu-shadow').remove();
        var _this = this;
        var $contextMenu = $('<div class="context-menu"></div>');
        $contextMenu.menu({
            onHide : function () {
                window.setTimeout(function () {
                    $contextMenu.menu('destroy');
                }, 200);
            }
        });
        for (var index in data) {
            var item = data[index];
            $contextMenu.menu('appendItem', item);
        }
        this.container.append($contextMenu);
        $contextMenu.menu('show', {top: e.pageY, left: e.pageX});
    }

    /**
     * 生成属性配置
     * @param data 基础数据
     * @param nodeRows 节点原始配置
     * @param configRows 节点更改配置
     */
    function generatePropertyRows(data, nodeRows, configRows) {
        var rows = [
            {"name":"节点","key":"id","value":data.id,"group":"基础信息"},
            {"name":"别名","key":"alias","value":"","group":"基础信息","editor":"text"},
            {"name":"名称","key":"text","value":data.text,"group":"基础信息","editor":"text"},
            {"name":"备注","key":"description","value":data.description,"group":"基础信息","editor":"textarea"},
            {"name":"父级","key":"parent","value":data.parent,"group":"插件信息","editor":"text"},
            {"name":"类型","key":"type","value":data.type,"group":"插件信息","editor":"text"},
            {"name":"插件","key":"plugin","value":data.plugin,"group":"插件信息","editor":"text"},
            {"name":"类名","key":"classname","value":data.classname,"group":"插件信息","editor":"text"},
            {"name":"前缀","key":"kvConfigPrefix","value":"","group":"配置中心","editor":"text"},
            {"name":"并行度","key":"parallelism","value":"","group":"配置中心","editor":"text"}
        ];
        rows = rows.concat(nodeRows);
        rows = rows.concat([{"name":"JSON","key":"returns","value":data.returns,"group":"字段类型","editor":"textarea"}]);
        for (var index in rows) {
            var item = rows[index];
            if(!item.key || !configRows[item.key]) continue;
            rows[index] = configRows[item.key];
        }
        return rows;
    }

    /**
     * 生成流程图节点
     */
    function jsPlumbFlowNode(id) {
        jsPlumbInstance.draggable(id, {containment:'#flow-chart-canvas'});
        var anchors = ["TopCenter", "RightMiddle", "BottomCenter", "LeftMiddle"];
        var result = {};
        for (var index in anchors) {
            result[id + '_' + anchors[index]] = jsPlumbInstance.addEndpoint(id, {anchor : anchors[index]}, {
                isSource : true,
                isTarget : true,
                maxConnections : -1,
                connectorOverlays: [ ["Arrow", { width: 10, length: 10, location: 1 }] ]
            });
        }
        return result;
    }

    /**
     * 流程图节点描述
     */
    function bindTips($obj, content) {
        if(!content) content = '暂无备注';
        $obj.find('.ace-icon').tooltip({
            position: 'right',
            content: content.replace(/\n/g, '<br>')
        });
    }

    /**
     * 画布配置
     */
    function propertygridCanvas() {
        $flowPropertyTable.propertygrid({
            showGroup : true,
            border : false,
            data:{total:0, rows:[
                    {"name":"宽度","key":"width","value":$flowChartCanvas.width(),"group":"画布设置","editor":"numberbox"},
                    {"name":"高度","key":"height","value":$flowChartCanvas.height(),"group":"画布设置","editor":"numberbox"}
                ]},
            onAfterEdit : function (rowIndex, rowData, changes) {
                if(!rowData.key) return true;
                switch (rowData.key) {
                    case "width" :
                        $flowChartCanvas.width(rowData.value);
                        break;
                    case "height" :
                        $flowChartCanvas.height(rowData.value);
                        break;
                }
            }
        });
        $flowPropertyTable.data('id', '');
    }
    var flowChartIndex = 0; // 节点索引
    var flowChartValue = {}; // 对应节点配置数据
    var flowChartLastMouseMoveEvent = null;
    var $flowChartCanvas = $('#flow-chart-canvas');
    var $layoutCenter = $('.layout-center');
    var $flowPropertyTable = $('#flow-property-table');
    var $flowNodesTree = $('#flow-nodes-tree');
    var $tipsStatus = $('#tips-status');
    var jsPlumbInstance = jsPlumb.getInstance({
        Endpoint:["Dot", {radius:2}]
    });
    propertygridCanvas();
    $layoutCenter.on('contextmenu', function () {return false;});
    jsPlumbInstance.bind('contextmenu', function (connInfo, originalEvent) {
        if(!(connInfo instanceof jsPlumb.Connection)) return true;
        new ContextMenu(originalEvent, [{
            text : '删除连线',
            iconCls : 'icon-remove',
            onclick : function () {
                jsPlumbInstance.deleteConnection(connInfo);
            }
        }]);
    });
    $flowChartCanvas.on('contextmenu', '.flow-chart-item', function (e) {
        var $obj = $(this);
        new ContextMenu(e, [{
            text : '删除节点',
            iconCls : 'icon-remove',
            onclick : function () {
                jsPlumbInstance.removeAllEndpoints($obj);
                $obj.remove();
                propertygridCanvas();
            }
        }]);
    }).on('click', '.flow-chart-item', function (e) {
        var _this = this;
        var $obj = $(this);
        var node = $flowNodesTree.tree('find', $obj.data('parent'));
        if($flowPropertyTable.data('id') == this.id) return false;
        $flowPropertyTable.data('id', this.id);
        var propertygrid = $.extend(true, {data:{total:0, rows:[]}}, node.property ? {data:{rows:node.property}} : {}, {
            onAfterEdit : function (rowIndex, rowData, changes) {
                if(!rowData.key) return true;
                flowChartValue[_this.id][rowData.key] = rowData;
                switch (rowData.key) {
                    case "parent":
                        $obj.data('parent', rowData.value);
                        break;
                    case "text" :
                        var value = rowData.value;
                        var content = flowChartValue[_this.id]["description"] ? flowChartValue[_this.id]["description"].value : null;
                        if(content) value += '<i class="ace-icon fa fa-comments-o"></i>';
                        $obj.linkbutton({text:value});
                        bindTips($obj, content);
                        jsPlumbInstance.repaintEverything();
                        break;
                    case "description" :
                        var value = $obj.text();
                        if(flowChartValue[_this.id]["text"]) value = flowChartValue[_this.id]["text"].value;
                        if(rowData.value) value += '<i class="ace-icon fa fa-comments-o"></i>';
                        $obj.linkbutton({text:value});
                        bindTips($obj, rowData.value);
                        jsPlumbInstance.repaintEverything();
                        break;
                }
            }
        });
        if(!flowChartValue[_this.id]) flowChartValue[_this.id] = {};
        propertygrid.data.rows = generatePropertyRows({
            id: _this.id,
            text: $obj.text(),
            parent : node.id,
            type: node.type,
            plugin: node.plugin,
            classname: node.classname,
            description: node.description,
            returns: node.returns ? JSON.stringify(node.returns) : ''
        }, propertygrid.data.rows, flowChartValue[_this.id]);
        $flowPropertyTable.propertygrid(propertygrid);
        return false;
    }).on('click', function () {
        propertygridCanvas();
    });
    $(window).on('resize', function () {
        window.setTimeout(function () {
            var top = $('.layout-center').height() - $flowChartCanvas.height();
            if(top < 0) top = 0;
            $flowChartCanvas.css({'margin-top':top / 2});
        }, 200);
    }).trigger('resize');
    $flowChartCanvas.on('mousemove', function (e) {
        flowChartLastMouseMoveEvent = e;
    });

    /**
     * 生成流程图节点
     */
    $flowChartCanvas.droppable({
        onDrop : function (e, source) {
            if(!$(source).hasClass('tree-node')) return true;
            var node = $flowNodesTree.tree('getData', source);
            var id = 'flowChartItem' + flowChartIndex;
            var $obj = $('<button id="' + id + '" class="flow-chart-item">' + node.text + '[' + flowChartIndex + ']</button>');
            $obj.data('index', flowChartIndex);
            $obj.data('parent', node.id);
            $obj.linkbutton({
                iconCls : node.iconCls
            });
            $(this).append($obj);
            $obj.css({
                top : flowChartLastMouseMoveEvent.offsetY - $obj.height() / 2,
                left : flowChartLastMouseMoveEvent.offsetX - $obj.width() / 2
            });
            $obj.trigger('click');
            flowChartIndex++;
            jsPlumbFlowNode(id);
        }
    });
    $('.flow-chart-act-save').on('click', function () {
        var _this = this;
        var $obj = $(this);
        if($obj.linkbuttonToggle('保存中...')) return false;
        var data = {
            width : $flowChartCanvas.width(),
            height : $flowChartCanvas.height()
        };
        data['nodes'] = {};
        $('.flow-chart-item').each(function () {
            var $obj = $(this);
            var node = $flowNodesTree.tree('find', $obj.data('parent'));
            var nodeRows = node.property ? node.property : [];
            var configRows = flowChartValue[this.id] ? flowChartValue[this.id] : {};
            var position = $obj.position();
            var item = {
                id : this.id,
                index : $obj.data('index'),
                top : position.top,
                left : position.left,
                width : $obj.width(),
                height : $obj.height(),
                parent : node.id,
                property : generatePropertyRows({
                    id: this.id,
                    text: $obj.text(),
                    parent: node.id,
                    type: node.type,
                    plugin: node.plugin,
                    classname: node.classname,
                    description: node.description,
                    returns: node.returns ? JSON.stringify(node.returns) : ''
                }, nodeRows, configRows)
            };
            data['nodes'][this.id] = item;
        });
        data['connections'] = [];
        var allConnections = jsPlumbInstance.getAllConnections();
        for (var i in allConnections) {
            var connection = allConnections[i];
            var item = {
                sourceId : connection.sourceId,
                targetId : connection.targetId
            };
            for (var j in connection.endpoints) {
                var endpoint = connection.endpoints[j];
                if(!item['sourceAnchor'] && connection.sourceId == endpoint.anchor.elementId) {
                    item['sourceAnchor'] = endpoint.anchor.type;
                } else {
                    item['targetAnchor'] = endpoint.anchor.type;
                }
            }
            data['connections'].push(item);
        }
        $tipsStatus.html('执行中...');
        $.ajax({
            url : manageUrl + (saveUrl ? saveUrl : '/flow/save'),
            contentType: "application/json",
            dataType: "json",
            data : JSON.stringify({
                id : info.id,
                content : JSON.stringify(data)
            }),
            type : 'POST',
            success : function (result) {
                $obj.linkbuttonToggle();
                $tipsStatus.html(result.message);
            }
        });
    });
    $('.flow-chart-act-node-refresh').on('click', function () {
        $flowNodesTree.tree({url:manageUrl + '/flowNode/tree?forceReload=1'});
    });
    $flowNodesTree.tree({
        url : manageUrl + '/flowNode/tree',
        dnd : true,
        onBeforeDrag : function (node) {
            return typeof node.draggable != 'undefined' && node.draggable;
        },
        onBeforeDrop : function (target,source,point) {
            return false;
        },
        onLoadSuccess : function (node, data) {
            (function (data) {
                if(!data) return;
                var data = $.parseJSON(data);
                $flowChartCanvas.css({width:data.width, height:data.height});
                propertygridCanvas();
                var endpoints = {};
                for (var i in data.nodes) {
                    var item = data.nodes[i];
                    if(item.index > flowChartIndex) flowChartIndex = item.index;
                    var property = {};
                    for(var j in item.property) {
                        property[item.property[j].key] = item.property[j];
                    }
                    flowChartValue[item.id] = property;
                    var node = $flowNodesTree.tree('find', item.parent);
                    if(null == node) {
                        node = {
                            iconCls: ''
                        };
                    }
                    var value = property['text'].value;
                    if(property['description'].value) value += '<i class="ace-icon fa fa-comments-o"></i>';
                    var $obj = $('<button id="' + item.id + '" class="flow-chart-item"></button>');
                    $obj.data('index', item.index);
                    $obj.data('parent', item.parent);
                    $obj.linkbutton({
                        text : value,
                        iconCls : node.iconCls
                    });
                    $flowChartCanvas.append($obj);
                    $obj.css({
                        top : item.top,
                        left : item.left
                    });
                    bindTips($obj, property['description'].value);
                    $.extend(endpoints, jsPlumbFlowNode(item.id));
                }
                flowChartIndex++;
                for (var i in data.connections) {
                    var connection = data.connections[i];
                    jsPlumbInstance.connect({
                        source : endpoints[connection.sourceId + '_' + connection.sourceAnchor],
                        target : endpoints[connection.targetId + '_' + connection.targetAnchor]
                    });
                }
                window.setTimeout(function () {
                    jsPlumbInstance.repaintEverything();
                }, 200);
            })(info.content);
        }
    });
});
</script>
</body>
</html>